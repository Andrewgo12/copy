version: '3.8'

services:
  # Agente principal
  local-agent:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: local-agent
    ports:
      - "8000:8000"  # API REST
      - "8501:8501"  # Streamlit UI
    volumes:
      - ./data:/app/data
      - ./config:/app/config
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Para Docker-in-Docker
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - VECTOR_DB_PATH=/app/data/vector_db
      - CACHE_DB_PATH=/app/data/cache
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_SANDBOX=true
      - REQUIRE_CONFIRMATION=true
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de datos Redis para caché
  redis:
    image: redis:7-alpine
    container_name: agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agent-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Base de datos PostgreSQL (opcional, para metadata)
  postgres:
    image: postgres:15-alpine
    container_name: agent-postgres
    environment:
      - POSTGRES_DB=agent_db
      - POSTGRES_USER=agent_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-agent_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agent-network
    restart: unless-stopped

  # Sandbox seguro para ejecución de código
  code-sandbox:
    image: python:3.11-slim
    container_name: agent-sandbox
    volumes:
      - sandbox-workspace:/workspace
      - ./sandbox_config:/config:ro
    networks:
      - agent-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"
    command: tail -f /dev/null  # Mantener contenedor vivo

  # Monitoring con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - agent-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: agent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - agent-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  agent-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  sandbox-workspace:
