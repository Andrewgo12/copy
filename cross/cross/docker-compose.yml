version: '3.8'

services:
  # Aplicación Node.js
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cross-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-cross_db}
      - DB_USER=${DB_USER:-cross_user}
      - DB_PASS=${DB_PASS:-cross_password}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-465}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - ./storage:/app/storage
      - ./resources:/app/resources:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cross-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:13-alpine
    container_name: cross-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-cross_db}
      - POSTGRES_USER=${DB_USER:-cross_user}
      - POSTGRES_PASSWORD=${DB_PASS:-cross_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - cross-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cross_user} -d ${DB_NAME:-cross_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: cross-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cross-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: cross-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./public:/var/www/public:ro
    depends_on:
      - app
    networks:
      - cross-network
    profiles:
      - with-nginx

  # Adminer para administración de BD (desarrollo)
  adminer:
    image: adminer:latest
    container_name: cross-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - cross-network
    profiles:
      - development

  # Redis Commander para administración de Redis (desarrollo)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cross-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - cross-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cross-network:
    driver: bridge